(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,'html,\nbody,\ndiv,\np,\nbutton,\nh1,\nh2,\nh3 {\n    margin: 0;\n    padding: 0;\n}\nbutton {\n    appearance: none;\n}\n:root {\n    font-size: 14px;\n}\n/* Utility */\n.btn {\n    font-size: calc(1.1rem + 0.1vw);\n}\n.btn:hover {\n    background-color: lightblue;\n    cursor: pointer;\n}\n.btn.active {\n    background-color: blue;\n    color: white;\n}\n/* Layout */\n.page-container {\n    min-height: 100svh;\n}\n.game-section {\n    width: 65%;\n    max-width: 400px;\n    margin: auto;\n}\n.header-section {\n    padding-block: 1em;\n    background-color: blue;\n    color: white;\n    min-width: 100%;\n    text-align: center;\n    pointer-events: none;\n}\n.board-title {\n    text-align: center;\n}\n.board {\n    flex: 0;\n    background-color: pink;\n    display: flex;\n    flex-wrap: wrap;\n    border: 3px black solid;\n    user-select: none;\n}\n.board-item {\n    aspect-ratio: 1/1;\n    width: 10%;\n    outline: 1px black solid;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.board-item:hover {\n    background-color: bisque;\n}\n.player-ship {\n    background-color: lightblue;\n}\n.player-occupied {\n    background-color: red;\n    cursor: not-allowed;\n}\n.player-placeable {\n    background-color: bisque;\n}\n.player-hit {\n    background-color: red;\n}\n.player-missed {\n    background-color: lime;\n}\n.ship-selection {\n    display: grid;\n    grid-auto-flow: column;\n    grid-auto-columns: 1fr;\n}\n.enemy-shot {\n    background-color: lightgrey;\n}\n.enemy-shot::before {\n    content: "X";\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;;;;;;IAQI,SAAS;IACT,UAAU;AACd;AACA;IACI,gBAAgB;AACpB;AACA;IACI,eAAe;AACnB;AACA,YAAY;AACZ;IACI,+BAA+B;AACnC;AACA;IACI,2BAA2B;IAC3B,eAAe;AACnB;AACA;IACI,sBAAsB;IACtB,YAAY;AAChB;AACA,WAAW;AACX;IACI,kBAAkB;AACtB;AACA;IACI,UAAU;IACV,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,oBAAoB;AACxB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,OAAO;IACP,sBAAsB;IACtB,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,iBAAiB;AACrB;AACA;IACI,iBAAiB;IACjB,UAAU;IACV,wBAAwB;IACxB,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,2BAA2B;AAC/B;AACA;IACI,qBAAqB;IACrB,mBAAmB;AACvB;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,qBAAqB;AACzB;AACA;IACI,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;AAC1B;AACA;IACI,2BAA2B;AAC/B;AACA;IACI,YAAY;AAChB",sourcesContent:['html,\nbody,\ndiv,\np,\nbutton,\nh1,\nh2,\nh3 {\n    margin: 0;\n    padding: 0;\n}\nbutton {\n    appearance: none;\n}\n:root {\n    font-size: 14px;\n}\n/* Utility */\n.btn {\n    font-size: calc(1.1rem + 0.1vw);\n}\n.btn:hover {\n    background-color: lightblue;\n    cursor: pointer;\n}\n.btn.active {\n    background-color: blue;\n    color: white;\n}\n/* Layout */\n.page-container {\n    min-height: 100svh;\n}\n.game-section {\n    width: 65%;\n    max-width: 400px;\n    margin: auto;\n}\n.header-section {\n    padding-block: 1em;\n    background-color: blue;\n    color: white;\n    min-width: 100%;\n    text-align: center;\n    pointer-events: none;\n}\n.board-title {\n    text-align: center;\n}\n.board {\n    flex: 0;\n    background-color: pink;\n    display: flex;\n    flex-wrap: wrap;\n    border: 3px black solid;\n    user-select: none;\n}\n.board-item {\n    aspect-ratio: 1/1;\n    width: 10%;\n    outline: 1px black solid;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.board-item:hover {\n    background-color: bisque;\n}\n.player-ship {\n    background-color: lightblue;\n}\n.player-occupied {\n    background-color: red;\n    cursor: not-allowed;\n}\n.player-placeable {\n    background-color: bisque;\n}\n.player-hit {\n    background-color: red;\n}\n.player-missed {\n    background-color: lime;\n}\n.ship-selection {\n    display: grid;\n    grid-auto-flow: column;\n    grid-auto-columns: 1fr;\n}\n.enemy-shot {\n    background-color: lightgrey;\n}\n.enemy-shot::before {\n    content: "X";\n}\n'],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var p=n(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var h=o(A,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var c=r(e,o),l=0;l<i.length;l++){var d=n(i[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),i=n(569),a=n.n(i),s=n(565),c=n.n(s),l=n(216),d=n.n(l),u=n(589),p=n.n(u),A=n(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),t()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;const g=(e,t)=>{if("number"!=typeof e||"number"!=typeof t||isNaN(e)||isNaN(t))throw new TypeError("Number arguments are expected");if(e<0||e>9||t<0||t>9)throw new RangeError("x and y coordinates are required to be between 0-9");const n=e,r=t;return{getX:()=>n,getY:()=>r,getType:()=>"Point",json:()=>`{"x": ${n}, "y": ${r}}`}},f=(()=>{let e={},t=0;return{subscribe:(n,r)=>(e[n]=[],t++,e[n].push({token:t,func:r}),t),unsubscribe:(t,n)=>{if(!t)throw TypeError("An event is expected");if(!n)throw TypeError("A token is expected");if(e[t])throw TypeError("No matching event found");const r=e[t].filter((e=>!(e.token===n)));if(r.length===e[t].length)throw TypeError(`No token matching ${n} was found`);e[t]=r},publish:t=>{if(void 0===e[t])throw TypeError(`"${t}" event has no subscribers yet.`);e[t].forEach((e=>e.func()))}}})(),b=(e,t,n)=>{document.querySelector(".page-container");const r=document.createElement("div");r.classList="board-container";const o=document.createElement("h3");o.innerText=t,o.classList="board-title";const i=document.createElement("div");i.classList="board",n&&f.subscribe("enemyShot",(()=>{const t=e.getEnemyBoard().getShots(),n=t[t.length-1];i.querySelector(`[x="${n.getX()}"][y="${n.getY()}"]`).classList.add("enemy-shot")}));for(let t=9;t>=0;t--)for(let o=0;o<10;o++){const a=document.createElement("div");if(a.setAttribute("x",o),a.setAttribute("y",t),a.classList="board-item",n){let n;a.addEventListener("mouseover",(()=>{const r=e.getPlayer().getShip(e.getSize(),g(o,t),e.getDirection());for(let e of r.coordinates){const t=i.querySelector(`[x="${e.getX()}"][y="${e.getY()}"]`);n=r.isPlaceable?"player-placeable":"player-occupied",t.classList.add(n)}})),a.addEventListener("mouseout",(()=>{i.querySelectorAll(".board-item").forEach((e=>e.classList.remove(n)))})),a.addEventListener("click",(function(){e.addShip(g(o,t))})),e.getPlayer().getOccupied().find((e=>e.getX()===o&&e.getY()===t))&&a.classList.add("player-ship")}else r.style.visibility="hidden",f.subscribe("gameStarted",(()=>{r.style.visibility="visible"})),a.addEventListener("click",(function(){e.getPlayerBoard().shoot(e.getEnemyPlayer(),g(o,t))?this.classList.add("player-hit"):this.classList.add("player-missed"),this.innerText="X",f.publish("userShot")}),{once:!0});i.appendChild(a)}return r.append(o,i),r},m=e=>{document.querySelector(".page-container");const t=document.createElement("div");t.classList="ship-selection";const n=document.createElement("button"),r=document.createElement("button"),o=document.createElement("button"),i=document.createElement("button"),a=document.createElement("button");n.id="directionBtn",r.id="smBtn",o.id="mdBtn",i.id="lgBtn",a.id="xlBtn",n.innerText="🧭",r.innerText="Small",o.innerText="Medium",i.innerText="Large",a.innerText="XL";const s=function(){let e=["up","right","down","left"],t=0;return{get:()=>e[t],next:()=>{t++,t===e.length&&(t=0)}}}();let c;return e.setDirection(s.get()),n.addEventListener("click",(function(){s.next(),e.setDirection(s.get())})),r.onclick=o.onclick=i.onclick=a.onclick=function(){switch(document.querySelectorAll(`.btn:not([${this.id}])`).forEach((e=>e.classList.remove("active"))),this.classList.add("active"),this.id){case"smBtn":c=2;break;case"mdBtn":c=3;break;case"lgBtn":c=4;break;case"xlBtn":c=5;break;default:throw TypeError("Uknown ship type was clicked")}e.setSize(c)},t.append(r,o,i,a,n),Array.from(t.children).forEach((e=>e.classList="btn")),r.click(),t};function y(){let e=[],t=0;return{getType:()=>"Board",getShots:()=>e,shoot:(n,r)=>{if(!n||"Player"!==n.getType())throw new TypeError(`A Player object is expected, ${n} passed`);if(!r||"Point"!==r.getType())throw new TypeError("A Point object is required");e.push(r);for(let e of n.getShipsOwned())for(let n=0;n<e.getSize();n++)if(e.coordinates[n].json()===r.json())return e.hit(),t++,!0;return!1},getHits:()=>t}}function B(e){if(!e)throw new TypeError("A name is expected");let t=e,n={xl:1,lg:1,md:2,sm:1},r=[],o={_data:[],add:function(e){if(e.length>0&&this.isOccupied(e))throw RangeError("Some of the ships points are already occupied");this._data=[...this._data,...e]},get:function(){return this._data},isOccupied:function(e){for(let t of e){const e=this._data.some((e=>e.json()===t.json()));if(e)return e}}};return{getType:()=>"Player",getName:()=>t,getShipsLeft:()=>n,getShipsOwned:()=>r,getOccupied:()=>o.get(),getShip:(e,t,n)=>{let r,i=[];if(!e||"number"!=typeof e||isNaN(e))throw new TypeError("A size of type number is expected");if(!t||"Point"!==t.getType())throw new TypeError("A Point object is expected");switch(n){case"up":for(let n=0;n<e&&!(t.getY()+n>9);n++){const e=g(t.getX(),t.getY()+n);i.push(e)}break;case"down":for(let n=0;n<e&&!(t.getY()-n<0);n++){const e=g(t.getX(),t.getY()-n);i.push(e)}break;case"right":for(let n=0;n<e&&!(t.getX()+n>9);n++){const e=g(t.getX()+n,t.getY());i.push(e)}break;case"left":for(let n=0;n<e&&!(t.getX()-n<0);n++){const e=g(t.getX()-n,t.getY());i.push(e)}break;default:throw TypeError(`Direction must be up, down, right or left. ${n} passed`)}r=!o.isOccupied(i)&&i.length===e;const a=Object.assign({},function(e){if(!e)throw new RangeError("Ship.js: Missing ship size");if("number"!=typeof e)throw new TypeError(`Ship.js: size should be of type number. ${typeof e} passed`);if(e>5)throw new RangeError(`Shipt.js: The size can be 2-4, ${e} is too big`);if(e<2)throw new RangeError(`Shipt.js: The size can be 2-4, ${e} is too small`);const t=e;let n=0,r=!1;return{getType:()=>"Ship",getSize:()=>t,getHits:()=>n,getIsSunk:()=>r,hit:function(){n++,n===t&&(r=!0)}}}(e),{coordinates:i,isPlaceable:r});return a},addShip:function(e,t,i){const a=this.getShip(e,t,i);if(!a.isPlaceable)throw new RangeError("Ship is exceeding the board or colliding with another ship, please start, direction and size");if(!a.isPlaceable)return;let s;switch(e){case 2:s="sm";break;case 3:s="md";break;case 4:s="lg";break;case 5:s="xl";break;default:throw new RangeError(`Ship size must be between 2-5, ${e} passed`)}if(!n[s])throw new RangeError(`Trying to create many ships of type ${s}.`);o.add(a.coordinates),n[s]--,r.push(a)}}}const C=(()=>{const e=y(),t=y();let n,r,o,i="up";return{init:(e,t)=>{n=e,r=t,r.populate()},getPlayerBoard:()=>e,getPlayer:()=>n,getEnemyPlayer:()=>r,getEnemyBoard:()=>t,setSize:e=>{if(!e)throw TypeError("A size is expected");o=e},getSize:()=>o,setDirection:e=>{if(!e)throw TypeError("A direction is expected");i=e},getDirection:()=>i,addShip:function(e){if(!e)throw TypeError("A Point is expected");n.addShip(o,e,i),f.publish("shipsChanged")},start:()=>{const r=n.getShipsLeft(),o=Object.keys(r).reduce(((e,t)=>e+r[t]),0),i=function(){if(n.getShipsOwned().length===o){f.publish("gameStarted");const r=n.getOccupied().length;f.subscribe("userShot",(()=>{let o;e.getHits()===r&&(alert("You won!!"),f.publish("gameOver"));do{const e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());o=g(e,t),console.log(console.log(o.json()))}while(t.getShots().some((e=>e.json()===o.json())));t.shoot(n,o),f.publish("enemyShot"),t.getHits()===r&&(alert("The enemy won :("),f.publish("gameOver"))}))}else a=setTimeout(i,500)};let a=setTimeout(i,500)}}})(),w=B("Joe"),v=(e=>{const t=B("AI");return Object.assign({},t,{populate:()=>{for(let e in t.getShipsLeft())for(;t.getShipsLeft()[e]>0;){let n;switch(e){case"sm":n=2;break;case"md":n=3;break;case"lg":n=4;break;case"xl":n=5}let r,o=Math.floor(4*Math.random()+1);switch(o){case 1:o="up";break;case 2:o="right";break;case 3:o="down";break;case 4:o="left"}do{const e=Math.floor(9*Math.random()+1),i=Math.floor(9*Math.random()+1);r=t.getShip(n,g(e,i),o)}while(!r.isPlaceable);t.addShip(n,r.coordinates[0],o)}}})})();C.init(w,v),C.start(),function(e){document.querySelector(".page-container").append((()=>{const e=document.createElement("div");return e.classList="header-section",e.innerHTML="<h1>Haswell's Battleship</h1>",e})(),(e=>{const t=document.createElement("div");t.classList="game-section";const n=b(e,"Enemy Sea");let r=b(e,"My Sea",e.getPlayer().getShipsOwned());return t.append(n,r,m(e)),f.subscribe("shipsChanged",(()=>{const n=b(e,"My Sea",e.getPlayer().getShipsOwned());t.replaceChild(n,r),r=n})),t})(e))}(C)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,