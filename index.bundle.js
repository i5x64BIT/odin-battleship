(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"html,\nbody,\ndiv,\np,\nbutton,\nh1,\nh2,\nh3 {\n    margin: 0;\n    padding: 0;\n}\nbutton {\n    appearance: none;\n}\n:root {\n    font-size: 14px;\n}\n/* Utility */\n.btn {\n    font-size: calc(1.1rem + 0.1vw);\n}\n.btn:hover {\n    background-color: lightblue;\n    cursor: pointer;\n}\n.btn.active {\n    background-color: blue;\n    color: white;\n}\n/* Layout */\n.page-container {\n    min-height: 100svh;\n}\n.game-section {\n    width: 65%;\n    max-width: 400px;\n    margin: auto;\n}\n.header-section {\n    padding-block: 1em;\n    background-color: blue;\n    color: white;\n    min-width: 100%;\n    text-align: center;\n    pointer-events: none;\n}\n.board-title {\n    text-align: center;\n}\n.board {\n    flex: 0;\n    background-color: pink;\n    display: flex;\n    flex-wrap: wrap;\n    border: 3px black solid;\n    user-select: none;\n}\n.board-item {\n    aspect-ratio: 1/1;\n    width: 10%;\n    outline: 1px black solid;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.board-item:hover {\n    background-color: bisque;\n}\n.player-ship {\n    background-color: lightblue;\n}\n.player-occupied {\n    background-color: red;\n    cursor: not-allowed;\n}\n.player-placeable {\n    background-color: bisque;\n}\n.player-hit {\n    background-color: red;\n}\n.player-missed {\n    background-color: lime;\n}\n.ship-selection {\n    display: grid;\n    grid-auto-flow: column;\n    grid-auto-columns: 1fr;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;;;;;;IAQI,SAAS;IACT,UAAU;AACd;AACA;IACI,gBAAgB;AACpB;AACA;IACI,eAAe;AACnB;AACA,YAAY;AACZ;IACI,+BAA+B;AACnC;AACA;IACI,2BAA2B;IAC3B,eAAe;AACnB;AACA;IACI,sBAAsB;IACtB,YAAY;AAChB;AACA,WAAW;AACX;IACI,kBAAkB;AACtB;AACA;IACI,UAAU;IACV,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,oBAAoB;AACxB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,OAAO;IACP,sBAAsB;IACtB,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,iBAAiB;AACrB;AACA;IACI,iBAAiB;IACjB,UAAU;IACV,wBAAwB;IACxB,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,2BAA2B;AAC/B;AACA;IACI,qBAAqB;IACrB,mBAAmB;AACvB;AACA;IACI,wBAAwB;AAC5B;AACA;IACI,qBAAqB;AACzB;AACA;IACI,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;AAC1B",sourcesContent:["html,\nbody,\ndiv,\np,\nbutton,\nh1,\nh2,\nh3 {\n    margin: 0;\n    padding: 0;\n}\nbutton {\n    appearance: none;\n}\n:root {\n    font-size: 14px;\n}\n/* Utility */\n.btn {\n    font-size: calc(1.1rem + 0.1vw);\n}\n.btn:hover {\n    background-color: lightblue;\n    cursor: pointer;\n}\n.btn.active {\n    background-color: blue;\n    color: white;\n}\n/* Layout */\n.page-container {\n    min-height: 100svh;\n}\n.game-section {\n    width: 65%;\n    max-width: 400px;\n    margin: auto;\n}\n.header-section {\n    padding-block: 1em;\n    background-color: blue;\n    color: white;\n    min-width: 100%;\n    text-align: center;\n    pointer-events: none;\n}\n.board-title {\n    text-align: center;\n}\n.board {\n    flex: 0;\n    background-color: pink;\n    display: flex;\n    flex-wrap: wrap;\n    border: 3px black solid;\n    user-select: none;\n}\n.board-item {\n    aspect-ratio: 1/1;\n    width: 10%;\n    outline: 1px black solid;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.board-item:hover {\n    background-color: bisque;\n}\n.player-ship {\n    background-color: lightblue;\n}\n.player-occupied {\n    background-color: red;\n    cursor: not-allowed;\n}\n.player-placeable {\n    background-color: bisque;\n}\n.player-hit {\n    background-color: red;\n}\n.player-missed {\n    background-color: lime;\n}\n.ship-selection {\n    display: grid;\n    grid-auto-flow: column;\n    grid-auto-columns: 1fr;\n}\n"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var p=t(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var h=o(A,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var c=r(e,o),l=0;l<i.length;l++){var d=t(i[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),c=t.n(s),l=t(216),d=t.n(l),u=t(589),p=t.n(u),A=t(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),n()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;const f=(e,n)=>{if("number"!=typeof e||"number"!=typeof n||isNaN(e)||isNaN(n))throw new TypeError("Number arguments are expected");if(e<0||e>9||n<0||n>9)throw new RangeError("x and y coordinates are required to be between 0-9");const t=e,r=n;return{getX:()=>t,getY:()=>r,getType:()=>"Point",json:()=>`{"x": ${t}, "y": ${r}}`}},g=(e,n,t)=>{document.querySelector(".page-container");const r=document.createElement("div");r.classList="board-container";const o=document.createElement("h3");o.innerText=n,o.classList="board-title";const i=document.createElement("div");i.classList="board";for(let n=9;n>=0;n--)for(let r=0;r<10;r++){const o=document.createElement("div");if(o.setAttribute("x",r),o.setAttribute("y",n),o.classList="board-item",t){let t;o.addEventListener("mouseover",(()=>{const o=e.getPlayer().getShip(e.getSize(),f(r,n),e.getDirection());for(let e of o.coordinates){const n=i.querySelector(`[x="${e.getX()}"][y="${e.getY()}"]`);t=o.isPlaceable?"player-placeable":"player-occupied",n.classList.add(t)}})),o.addEventListener("mouseout",(()=>{i.querySelectorAll(".board-item").forEach((e=>e.classList.remove(t)))})),o.addEventListener("click",(function(){e.addShip(f(r,n))})),e.getPlayer().getOccupied().find((e=>e.getX()===r&&e.getY()===n))&&o.classList.add("player-ship")}else o.addEventListener("click",(function(){e.getPlayerBoard().shoot(e.getEnemyPlayer(),f(r,n))?this.classList.add("player-hit"):this.classList.add("player-missed"),this.innerText="X"}),{once:!0});i.appendChild(o)}return r.append(o,i),r},b=e=>{document.querySelector(".page-container");const n=document.createElement("div");n.classList="ship-selection";const t=document.createElement("button"),r=document.createElement("button"),o=document.createElement("button"),i=document.createElement("button"),a=document.createElement("button");t.id="directionBtn",r.id="smBtn",o.id="mdBtn",i.id="lgBtn",a.id="xlBtn",t.innerText="🧭",r.innerText="Small",o.innerText="Medium",i.innerText="Large",a.innerText="XL";const s=function(){let e=["up","right","down","left"],n=0;return{get:()=>e[n],next:()=>{n++,n===e.length&&(n=0)}}}();let c;return e.setDirection(s.get()),t.addEventListener("click",(function(){s.next(),e.setDirection(s.get())})),r.onclick=o.onclick=i.onclick=a.onclick=function(){switch(document.querySelectorAll(`.btn:not([${this.id}])`).forEach((e=>e.classList.remove("active"))),this.classList.add("active"),this.id){case"smBtn":c=2;break;case"mdBtn":c=3;break;case"lgBtn":c=4;break;case"xlBtn":c=5;break;default:throw TypeError("Uknown ship type was clicked")}e.setSize(c)},n.append(r,o,i,a,t),Array.from(n.children).forEach((e=>e.classList="btn")),r.click(),n},m=(()=>{let e={},n=0;return{subscribe:(t,r)=>(e[t]=[],n++,e[t].push({token:n,func:r}),n),unsubscribe:(n,t)=>{if(!n)throw TypeError("An event is expected");if(!t)throw TypeError("A token is expected");if(e[n])throw TypeError("No matching event found");const r=e[n].filter((e=>!(e.token===t)));if(r.length===e[n].length)throw TypeError(`No token matching ${t} was found`);e[n]=r},publish:n=>{if(void 0===e[n])throw TypeError(`"${n}" event has no subscribers yet.`);e[n].forEach((e=>e.func()))}}})();function y(e){if(!e)throw new TypeError("A name is expected");let n=e,t={xl:1,lg:1,md:2,sm:1},r=[],o={_data:[],add:function(e){if(e.length>0&&this.isOccupied(e))throw RangeError("Some of the ships points are already occupied");this._data=[...this._data,...e]},get:function(){return this._data},isOccupied:function(e){for(let n of e){const e=this._data.some((e=>e.json()===n.json()));if(e)return e}}};return{getType:()=>"Player",getName:()=>n,getShipsLeft:()=>t,getShipsOwned:()=>r,getOccupied:()=>o.get(),getShip:(e,n,t)=>{let r,i=[];if(!e||"number"!=typeof e||isNaN(e))throw new TypeError("A size of type number is expected");if(!n||"Point"!==n.getType())throw new TypeError("A Point object is expected");switch(t){case"up":for(let t=0;t<e&&!(n.getY()+t>9);t++){const e=f(n.getX(),n.getY()+t);i.push(e)}break;case"down":for(let t=0;t<e&&!(n.getY()-t<0);t++){const e=f(n.getX(),n.getY()-t);i.push(e)}break;case"right":for(let t=0;t<e&&!(n.getX()+t>9);t++){const e=f(n.getX()+t,n.getY());i.push(e)}break;case"left":for(let t=0;t<e&&!(n.getX()-t<0);t++){const e=f(n.getX()-t,n.getY());i.push(e)}break;default:throw TypeError(`Direction must be up, down, right or left. ${t} passed`)}r=!o.isOccupied(i)&&i.length===e;const a=Object.assign({},function(e){if(!e)throw new RangeError("Ship.js: Missing ship size");if("number"!=typeof e)throw new TypeError(`Ship.js: size should be of type number. ${typeof e} passed`);if(e>5)throw new RangeError(`Shipt.js: The size can be 2-4, ${e} is too big`);if(e<2)throw new RangeError(`Shipt.js: The size can be 2-4, ${e} is too small`);const n=e;let t=0,r=!1;return{getType:()=>"Ship",getSize:()=>n,getHits:()=>t,getIsSunk:()=>r,hit:function(){t++,t===n&&(r=!0)}}}(e),{coordinates:i,isPlaceable:r});return a},addShip:function(e,n,i){const a=this.getShip(e,n,i);if(!a.isPlaceable)throw new RangeError("Ship is exceeding the board or colliding with another ship, please start, direction and size");if(!a.isPlaceable)return;let s;switch(e){case 2:s="sm";break;case 3:s="md";break;case 4:s="lg";break;case 5:s="xl";break;default:throw new RangeError(`Ship size must be between 2-5, ${e} passed`)}if(!t[s])throw new RangeError(`Trying to create many ships of type ${s}.`);o.add(a.coordinates),t[s]--,r.push(a)}}}const B=(()=>{const e=function(){let e=[];return{getType:()=>"Board",getShots:()=>e,shoot:(n,t)=>{if(!n||"Player"!==n.getType())throw new TypeError(`A Player object is expected, ${n} passed`);if(!t||"Point"!==t.getType())throw new TypeError("A Point object is required");e.push(t);for(let e of n.getShipsOwned())for(let n=0;n<e.getSize();n++)if(e.coordinates[n].json()===t.json())return e.hit(),!0;return!1}}}();let n,t,r,o="up";return{init:(e,r)=>{n=e,t=r,r.addShip(3,f(1,1),"up"),r.addShip(3,f(5,5),"right"),r.addShip(4,f(0,9),"down"),r.addShip(2,f(5,8),"down")},getPlayerBoard:()=>e,getPlayer:()=>n,getEnemyPlayer:()=>t,setSize:e=>{if(!e)throw TypeError("A size is expected");r=e},getSize:()=>r,setDirection:e=>{if(!e)throw TypeError("A direction is expected");o=e},getDirection:()=>o,addShip:function(e){if(!e)throw TypeError("A Point is expected");n.addShip(r,e,o),m.publish("shipsChanged")}}})(),C=y("Joe"),w=y("AI");B.init(C,w),function(e){document.querySelector(".page-container").append((()=>{const e=document.createElement("div");return e.classList="header-section",e.innerHTML="<h1>Haswell's Battleship</h1>",e})(),(e=>{const n=document.createElement("div");n.classList="game-section";const t=g(e,"Enemy Sea");let r=g(e,"My Sea",e.getPlayer().getShipsOwned());return n.append(t,r,b(e)),m.subscribe("shipsChanged",(()=>{const t=g(e,"My Sea",e.getPlayer().getShipsOwned());n.replaceChild(t,r),r=t})),n})(e))}(B)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,